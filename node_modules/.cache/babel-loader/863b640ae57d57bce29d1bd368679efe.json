{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/kevinyao/Documents/GitHub/create-react-app/my-app/src/components/Chatbox/Chatbox.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './Chatbox.css';\nimport { Image, InputGroup, Button, Row, Col, Modal } from 'react-bootstrap';\nimport Textarea from 'react-expanding-textarea';\nimport { BsHeartFill, BsHeart } from \"react-icons/bs\";\nimport ReactTooltip from 'react-tooltip';\nimport Toolbar from '../Toolbar/Toolbar.js';\nimport InstagramContainer from '../InstagramContainer/InstagramContainer.js';\nimport { commentStorage, statusStorage } from '../Storage/Storage.js';\n\nconst Chatbox = ({\n  view,\n  setView\n}) => {\n  _s();\n\n  const [comments, setComments] = commentStorage();\n  const [status, setStatus] = statusStorage();\n  const [showViewAll, setShowViewAll] = useState(false);\n  const [showCommentSetting, setShowCommentSetting] = useState({\n    open: false,\n    index: null,\n    rIndex: null\n  });\n\n  const handleCloseViewAll = () => setShowViewAll(false);\n\n  const handleShowViewAll = () => setShowViewAll(true);\n\n  const handleCloseSetting = (index, rIndex) => setShowCommentSetting({\n    open: false,\n    index,\n    rIndex\n  });\n\n  const handleShowSetting = (index, rIndex) => setShowCommentSetting({\n    open: true,\n    index,\n    rIndex\n  });\n\n  const textRef = useRef(null);\n  const messageEnd = useRef(null);\n\n  const timeConversion = milliseconds => {\n    const days = (milliseconds / (1000 * 60 * 60 * 24)).toFixed(0);\n    if (days > 0) return `${days}d`;\n    const hours = (milliseconds / (1000 * 60 * 60)).toFixed(0);\n    if (hours > 0) return `${hours}h`;\n    const minutes = (milliseconds / (1000 * 60)).toFixed(0);\n    if (minutes > 0) return `${minutes}m`;\n    const seconds = (milliseconds / 1000).toFixed(0);\n    return `${seconds}s`;\n  };\n\n  const onReplyClick = (index, reply) => {\n    textRef.current.value = `@${reply.name} `;\n    setStatus({ ...status,\n      replyTarget: index\n    });\n    textRef.current.focus();\n  };\n\n  const onTextChange = e => {\n    if (e.target.value === '') {\n      setStatus({ ...status,\n        replyTarget: -1\n      });\n    }\n  };\n\n  const tooltipClick = (index, rIndex) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => handleShowSetting(index, rIndex),\n      children: \"...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this);\n  };\n\n  const portraitTable = values => {\n    let expand = false;\n    return values.map((comment, index) => {\n      if ([0, 1, values.length - 2, values.length - 1].includes(index)) {\n        return /*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            className: \"comment\",\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: comment.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 15\n            }, this), \" \", comment.comment]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            xs: \"auto\",\n            className: \"heart\",\n            children: isCommentLiked(index) ? /*#__PURE__*/_jsxDEV(BsHeartFill, {\n              onClick: () => likedComment(index)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(BsHeart, {\n              onClick: () => likedComment(index)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this);\n      }\n\n      if (!expand) {\n        expand = true;\n        return /*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              onClick: handleShowViewAll,\n              children: [\"View all \", values.length - 4, \" comments\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Modal, {\n            className: \"lsmodal\",\n            centered: true,\n            show: showViewAll,\n            onHide: handleCloseViewAll,\n            children: /*#__PURE__*/_jsxDEV(Modal.Body, {\n              children: /*#__PURE__*/_jsxDEV(InstagramContainer, {\n                defaultView: \"landscape\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this);\n      }\n    });\n  };\n\n  const toggleReplies = index => {\n    let newComments = comments;\n    newComments[index].showAll = !newComments[index].showAll;\n    setComments(newComments);\n  };\n\n  const isEmptyOrSpace = str => {\n    return str === null || str.match(/^ *&/) !== null;\n  };\n\n  const handlePost = () => {\n    console.log(isEmptyOrSpace(textRef.current.value));\n    console.log(textRef.current.value);\n\n    if (textRef.current.value) {\n      const messageObject = {\n        name: status.currentUser.name,\n        comment: textRef.current.value,\n        replies: [],\n        liked: [],\n        image: status.currentUser.image,\n        showAll: false,\n        postTime: new Date().getTime()\n      };\n\n      if (status.replyTarget === -1) {\n        setComments([...comments, messageObject]);\n      } else {\n        let newComments = comments;\n        const replies = newComments[status.replyTarget].replies;\n        newComments[status.replyTarget].replies = [...replies, messageObject];\n        setComments(newComments);\n      }\n\n      textRef.current.value = '';\n    }\n\n    setStatus({ ...status,\n      replyTarget: -1\n    });\n  };\n\n  const isCommentLiked = liked => {\n    for (let i = 0; i < liked.length; i += 1) {\n      if (liked[i].name === status.currentUser.name) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  const likedReply = (index, rIndex) => {\n    let newComments = comments;\n    let addUser = true;\n    const replies = comments[index].replies[rIndex];\n\n    for (let i = 0; i < replies.liked.length; i += 1) {\n      if (replies.liked[i].name === status.currentUser.name) {\n        replies.liked.splice(i, 1);\n        addUser = false;\n      }\n    }\n\n    if (addUser) {\n      replies.liked = [...replies.liked, status.currentUser];\n    }\n\n    newComments[index].replies[rIndex] = replies;\n    setComments(newComments);\n  };\n\n  const likedComment = index => {\n    let newComments = comments;\n    let addUser = true;\n\n    for (let i = 0; i < comments[index].liked.length; i += 1) {\n      if (comments[index].liked[i].name === status.currentUser.name) {\n        newComments[index].liked.splice(i, 1);\n        addUser = false;\n      }\n    }\n\n    if (addUser) {\n      newComments[index].liked = [...newComments[index].liked, status.currentUser];\n    }\n\n    setComments(newComments);\n  };\n\n  const deleteComment = (index, rIndex) => {\n    let newComments = comments;\n\n    if (rIndex > -1) {\n      newComments[index].replies.splice(rIndex, 1);\n    } else {\n      newComments.splice(index, 1);\n    }\n\n    handleCloseSetting();\n    setComments(newComments);\n  };\n\n  const canDelete = (index, rIndex) => {\n    if (rIndex > -1) {\n      return comments[index].replies[rIndex].name === status.currentUser.name;\n    }\n\n    return comments[index].name === status.currentUser.name;\n  };\n\n  const getTableData = values => {\n    const currentTime = new Date().getTime();\n\n    if (view == 'portrait') {\n      return portraitTable(values);\n    }\n\n    return values.map((comment, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Modal, {\n          className: \"lsmodal\",\n          centered: true,\n          show: showCommentSetting.open,\n          onHide: handleCloseSetting,\n          children: /*#__PURE__*/_jsxDEV(Modal.Body, {\n            children: [showCommentSetting.open && canDelete(showCommentSetting.index, showCommentSetting.rIndex) && /*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => deleteComment(showCommentSetting.index, showCommentSetting.rIndex),\n              className: \"settingsbutton\",\n              variant: \"outline-danger\",\n              size: \"lg\",\n              block: true,\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              className: \"settingsbutton\",\n              variant: \"outline-secondary\",\n              size: \"lg\",\n              block: true,\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ReactTooltip, {\n          arrowColor: \"transparent\",\n          className: \"rttooltip\",\n          id: \"rtTooltip\",\n          clickable: true,\n          place: \"left\",\n          effect: \"solid\",\n          offset: {\n            right: '380px'\n          },\n          children: tooltipClick(index, -1)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          \"data-tip\": true,\n          \"data-for\": \"rtTooltip\",\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            xs: \"auto\",\n            children: /*#__PURE__*/_jsxDEV(Image, {\n              className: \"chatimage\",\n              src: comment.image,\n              roundedCircle: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            className: \"lscomment\",\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: comment.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 15\n            }, this), \" \", comment.comment]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            className: \"heart\",\n            xs: \"auto\",\n            children: isCommentLiked(comment.liked) ? /*#__PURE__*/_jsxDEV(BsHeartFill, {\n              onClick: () => likedComment(index)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(BsHeart, {\n              onClick: () => likedComment(index)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            className: \"commentdetails\",\n            xs: \"auto\",\n            children: timeConversion(currentTime - comment.postTime)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            className: \"commentdetails\",\n            xs: \"auto\",\n            children: [comment.liked.length, \" Likes\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            className: \"commentdetails\",\n            xs: \"auto\",\n            onClick: () => onReplyClick(index, comment),\n            children: \"Reply\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this), comment.replies.length > 0 ? /*#__PURE__*/_jsxDEV(Row, {\n          children: comment.showAll ? /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: '100%'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Col, {\n              onClick: () => toggleReplies(index),\n              className: \"showall\",\n              children: \"Hide Replies\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"replydiv\",\n              children: comment.replies.map((reply, rIndex) => {\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(ReactTooltip, {\n                    arrowColor: \"transparent\",\n                    className: \"rttooltip\",\n                    id: \"replyTooltip\",\n                    clickable: true,\n                    place: \"left\",\n                    effect: \"solid\",\n                    offset: {\n                      right: '320px'\n                    },\n                    children: tooltipClick(index, rIndex)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 258,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(Row, {\n                    className: \"replyrow\",\n                    \"data-tip\": true,\n                    \"data-for\": \"replyTooltip\",\n                    children: [/*#__PURE__*/_jsxDEV(Col, {\n                      className: \"icon\",\n                      xs: \"auto\",\n                      children: /*#__PURE__*/_jsxDEV(Image, {\n                        className: \"chatimage\",\n                        src: reply.image,\n                        roundedCircle: true\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 271,\n                        columnNumber: 33\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 270,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(Col, {\n                      className: \"lscomment\",\n                      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                        children: reply.name\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 274,\n                        columnNumber: 33\n                      }, this), \" \", reply.comment]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 273,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(Col, {\n                      className: \"heart\",\n                      xs: \"auto\",\n                      children: isCommentLiked(reply.liked) ? /*#__PURE__*/_jsxDEV(BsHeartFill, {\n                        onClick: () => likedReply(index, rIndex)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 278,\n                        columnNumber: 35\n                      }, this) : /*#__PURE__*/_jsxDEV(BsHeart, {\n                        onClick: () => likedReply(index, rIndex)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 279,\n                        columnNumber: 35\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 276,\n                      columnNumber: 31\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 269,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(Row, {\n                    children: [/*#__PURE__*/_jsxDEV(Col, {\n                      className: \"commentdetails\",\n                      xs: \"auto\",\n                      children: timeConversion(currentTime - reply.postTime)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 283,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(Col, {\n                      className: \"commentdetails\",\n                      xs: \"auto\",\n                      children: [reply.liked.length, \" Likes\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 286,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(Col, {\n                      className: \"commentdetails\",\n                      xs: \"auto\",\n                      onClick: () => onReplyClick(index, reply),\n                      children: \"Reply\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 289,\n                      columnNumber: 31\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 282,\n                    columnNumber: 29\n                  }, this)]\n                }, rIndex, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 257,\n                  columnNumber: 27\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(Col, {\n            onClick: () => toggleReplies(index),\n            className: \"showall\",\n            children: [\"Show \", comment.replies.length, \" Replies\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  useEffect(() => {\n    messageEnd.current.scrollIntoView();\n  }, [comments]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: view + 'chatbox',\n    children: [view == 'portrait' && /*#__PURE__*/_jsxDEV(Toolbar, {\n      view: view,\n      textRef: textRef,\n      setView: setView\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 31\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: view + \"chatdiv\",\n      children: [getTableData(comments), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messageEnd\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }, this), view == 'landscape' && /*#__PURE__*/_jsxDEV(Toolbar, {\n      view: view,\n      textRef: textRef,\n      setView: setView\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 32\n    }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n      children: [/*#__PURE__*/_jsxDEV(Textarea, {\n        className: \"textarea\",\n        placeholder: \"Add a comment...\",\n        maxLength: \"128\",\n        onChange: e => onTextChange(e),\n        ref: textRef,\n        onKeyDown: e => {\n          if (e.key === 'Enter') {\n            handlePost();\n            e.stopPropagation();\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputGroup.Append, {\n        className: \"post\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => handlePost(),\n          variant: \"link\",\n          children: \"Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 316,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Chatbox, \"fgcY2+UoVJKI08bgrMyZEIFjMg0=\");\n\n_c = Chatbox;\nChatbox.propTypes = {\n  view: PropTypes.string.isRequired,\n  setView: PropTypes.func.isRequired\n};\nexport default Chatbox;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chatbox\");","map":{"version":3,"sources":["/Users/kevinyao/Documents/GitHub/create-react-app/my-app/src/components/Chatbox/Chatbox.js"],"names":["React","useRef","useEffect","useState","PropTypes","Image","InputGroup","Button","Row","Col","Modal","Textarea","BsHeartFill","BsHeart","ReactTooltip","Toolbar","InstagramContainer","commentStorage","statusStorage","Chatbox","view","setView","comments","setComments","status","setStatus","showViewAll","setShowViewAll","showCommentSetting","setShowCommentSetting","open","index","rIndex","handleCloseViewAll","handleShowViewAll","handleCloseSetting","handleShowSetting","textRef","messageEnd","timeConversion","milliseconds","days","toFixed","hours","minutes","seconds","onReplyClick","reply","current","value","name","replyTarget","focus","onTextChange","e","target","tooltipClick","portraitTable","values","expand","map","comment","length","includes","isCommentLiked","likedComment","toggleReplies","newComments","showAll","isEmptyOrSpace","str","match","handlePost","console","log","messageObject","currentUser","replies","liked","image","postTime","Date","getTime","i","likedReply","addUser","splice","deleteComment","canDelete","getTableData","currentTime","right","width","scrollIntoView","key","stopPropagation","propTypes","string","isRequired","func"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Chatbox.css';\n\nimport {Image, InputGroup, Button, Row, Col, Modal} from 'react-bootstrap';\nimport Textarea from 'react-expanding-textarea';\nimport { BsHeartFill, BsHeart } from \"react-icons/bs\";\nimport ReactTooltip from 'react-tooltip';\n\nimport Toolbar from '../Toolbar/Toolbar.js';\nimport InstagramContainer from '../InstagramContainer/InstagramContainer.js';\nimport { commentStorage, statusStorage } from '../Storage/Storage.js';\n\nconst Chatbox = ({view, setView}) => {\n  const [comments, setComments] = commentStorage();\n  const [status, setStatus] = statusStorage();\n  const [showViewAll, setShowViewAll] = useState(false);\n  const [showCommentSetting, setShowCommentSetting] = useState({open: false, index: null, rIndex: null});\n  const handleCloseViewAll = () => setShowViewAll(false);\n  const handleShowViewAll = () => setShowViewAll(true);\n  const handleCloseSetting = (index, rIndex) => setShowCommentSetting({open: false, index, rIndex});\n  const handleShowSetting = (index, rIndex) => setShowCommentSetting({open: true, index, rIndex});\n  const textRef = useRef(null);\n  const messageEnd = useRef(null);\n\n  const timeConversion = milliseconds => {\n    const days = (milliseconds / (1000 * 60 * 60 * 24)).toFixed(0);\n    if (days > 0) return `${days}d`;\n    const hours = (milliseconds / (1000 * 60 * 60)).toFixed(0);\n    if (hours > 0) return `${hours}h`;\n    const minutes = (milliseconds / (1000 * 60)).toFixed(0);\n    if (minutes > 0) return `${minutes}m`;\n    const seconds = (milliseconds / 1000).toFixed(0);\n    return `${seconds}s`;\n  }\n\n  const onReplyClick = (index, reply) => {\n    textRef.current.value = `@${reply.name} `;\n    setStatus({...status, replyTarget: index});\n    textRef.current.focus();\n  }\n\n  const onTextChange = e => {\n    if (e.target.value === '') {\n      setStatus({...status, replyTarget: -1});\n    }\n  }\n\n  const tooltipClick = (index, rIndex) => {\n    return (\n      <div onClick={() => handleShowSetting(index, rIndex)}>\n        ...\n      </div>\n    );\n  }\n\n  const portraitTable = values => {\n    let expand = false;\n    return (values.map((comment, index) => {\n      if ([0, 1, values.length - 2, values.length - 1].includes(index)) {\n        return(\n          <Row key={index}>\n            <Col className=\"comment\">\n              <b>{comment.name}</b> {comment.comment}\n            </Col>\n            <Col xs=\"auto\" className=\"heart\">\n              {isCommentLiked(index) ?\n                <BsHeartFill onClick={() => likedComment(index)}/> :\n                <BsHeart onClick={() => likedComment(index)}/>}\n            </Col>\n          </Row>\n        );\n      }\n      if (!expand) {\n        expand = true;\n        return(\n          <Row key={index}>\n            <Col>\n              <p onClick={handleShowViewAll}>View all {values.length - 4} comments</p>\n            </Col>\n            <Modal className=\"lsmodal\" centered show={showViewAll} onHide={handleCloseViewAll}>\n              <Modal.Body>\n                <InstagramContainer defaultView='landscape'/>\n              </Modal.Body>\n            </Modal>\n          </Row>\n        );\n      }\n    }));\n  }\n\n  const toggleReplies = index => {\n    let newComments = comments;\n    newComments[index].showAll = !newComments[index].showAll;\n    setComments(newComments);\n  }\n\n  const isEmptyOrSpace = str => {\n    return str === null || str.match(/^ *&/) !== null;\n  }\n\n  const handlePost = () => {\n    console.log(isEmptyOrSpace(textRef.current.value));\n    console.log(textRef.current.value);\n    if(textRef.current.value) {\n      const messageObject = {\n        name: status.currentUser.name,\n        comment: textRef.current.value,\n        replies: [],\n        liked: [],\n        image: status.currentUser.image,\n        showAll: false,\n        postTime: new Date().getTime(),\n      }\n      if (status.replyTarget === -1) {\n        setComments([...comments, messageObject]);\n      } else {\n        let newComments = comments;\n        const replies = newComments[status.replyTarget].replies;\n        newComments[status.replyTarget].replies = [...replies, messageObject];\n        setComments(newComments);\n      }\n      textRef.current.value = '';\n    }\n    setStatus({...status, replyTarget: -1});\n  }\n\n  const isCommentLiked = liked => {\n    for (let i = 0; i < liked.length; i += 1) {\n      if (liked[i].name === status.currentUser.name) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  const likedReply = (index, rIndex) => {\n    let newComments = comments;\n    let addUser = true;\n    const replies = comments[index].replies[rIndex];\n    for (let i = 0; i < replies.liked.length; i += 1) {\n      if (replies.liked[i].name === status.currentUser.name) {\n        replies.liked.splice(i, 1);\n        addUser = false;\n      }\n    }\n    if (addUser) {\n      replies.liked = [...replies.liked, status.currentUser];\n    }\n    newComments[index].replies[rIndex] = replies\n    setComments(newComments);\n  }\n\n  const likedComment = index => {\n    let newComments = comments;\n    let addUser = true;\n    for (let i = 0; i < comments[index].liked.length; i += 1) {\n      if (comments[index].liked[i].name === status.currentUser.name) {\n        newComments[index].liked.splice(i, 1);\n        addUser = false;\n      }\n    }\n    if (addUser) {\n      newComments[index].liked = [...newComments[index].liked, status.currentUser];\n    }\n    setComments(newComments);\n  }\n\n  const deleteComment = (index, rIndex) => {\n    let newComments = comments;\n    if (rIndex > -1) {\n      newComments[index].replies.splice(rIndex, 1);\n    } else {\n      newComments.splice(index, 1);\n    }\n    handleCloseSetting();\n    setComments(newComments);\n  }\n\n  const canDelete = (index, rIndex) => {\n    if (rIndex > -1) {\n      return (comments[index].replies[rIndex].name === status.currentUser.name)\n    }\n    return comments[index].name === status.currentUser.name;\n  }\n\n  const getTableData = values => {\n    const currentTime = new Date().getTime();\n    if (view == 'portrait') {\n      return(portraitTable(values));\n    }\n    return (values.map((comment, index) => {\n      return(\n        <div key={index}>\n          <Modal className='lsmodal' centered show={showCommentSetting.open} onHide={handleCloseSetting}>\n            <Modal.Body>\n              {\n                showCommentSetting.open && canDelete(showCommentSetting.index, showCommentSetting.rIndex) && (\n                  <Button\n                    onClick={() => deleteComment(showCommentSetting.index, showCommentSetting.rIndex)}\n                    className=\"settingsbutton\" variant=\"outline-danger\" size=\"lg\" block\n                  >\n                    Delete\n                  </Button>\n                )\n              }\n              <Button className=\"settingsbutton\" variant=\"outline-secondary\" size=\"lg\" block>\n                Cancel\n              </Button>\n            </Modal.Body>\n          </Modal>\n          <ReactTooltip\n            arrowColor=\"transparent\"\n            className=\"rttooltip\"\n            id=\"rtTooltip\"\n            clickable={true}\n            place='left'\n            effect=\"solid\"\n            offset={{right:'380px'}}\n          >\n            {tooltipClick(index, -1)}\n          </ReactTooltip>\n          <Row data-tip data-for='rtTooltip'>\n            <Col xs=\"auto\">\n              <Image className='chatimage' src={comment.image} roundedCircle />\n            </Col>\n            <Col className=\"lscomment\">\n              <b>{comment.name}</b> {comment.comment}\n            </Col>\n            <Col className=\"heart\" xs=\"auto\">\n              {isCommentLiked(comment.liked) ?\n                <BsHeartFill onClick={() => likedComment(index)}/> :\n                <BsHeart onClick={() => likedComment(index)}/>}\n            </Col>\n          </Row>\n          <Row>\n            <Col className=\"commentdetails\" xs=\"auto\">\n              {timeConversion(currentTime - comment.postTime)}\n            </Col>\n            <Col className=\"commentdetails\" xs=\"auto\">\n              {comment.liked.length} Likes\n            </Col>\n            <Col className=\"commentdetails\" xs=\"auto\" onClick={() => onReplyClick(index, comment)}>\n              Reply\n            </Col>\n          </Row>\n          {comment.replies.length > 0 ?\n            <Row>\n              {comment.showAll ?\n                <div style={{width: '100%'}}>\n                  <Col onClick={() => toggleReplies(index)} className=\"showall\">Hide Replies</Col>\n                  <div className=\"replydiv\">\n                    {\n                      comment.replies.map((reply, rIndex) => {\n                        return (\n                          <div key={rIndex}>\n                            <ReactTooltip\n                              arrowColor=\"transparent\"\n                              className=\"rttooltip\"\n                              id=\"replyTooltip\"\n                              clickable={true}\n                              place='left'\n                              effect=\"solid\"\n                              offset={{right:'320px'}}\n                            >\n                              {tooltipClick(index, rIndex)}\n                            </ReactTooltip>\n                            <Row className=\"replyrow\" data-tip data-for='replyTooltip'>\n                              <Col className=\"icon\" xs=\"auto\">\n                                <Image className='chatimage' src={reply.image} roundedCircle />\n                              </Col>\n                              <Col className=\"lscomment\">\n                                <b>{reply.name}</b> {reply.comment}\n                              </Col>\n                              <Col className=\"heart\" xs=\"auto\">\n                                {isCommentLiked(reply.liked) ?\n                                  <BsHeartFill onClick={() => likedReply(index, rIndex)}/> :\n                                  <BsHeart onClick={() => likedReply(index, rIndex)}/>}\n                              </Col>\n                            </Row>\n                            <Row>\n                              <Col className=\"commentdetails\" xs=\"auto\">\n                                {timeConversion(currentTime - reply.postTime)}\n                              </Col>\n                              <Col className=\"commentdetails\" xs=\"auto\">\n                                {reply.liked.length} Likes\n                              </Col>\n                              <Col className=\"commentdetails\" xs=\"auto\" onClick={() => onReplyClick(index, reply)}>\n                                Reply\n                              </Col>\n                            </Row>\n                          </div>\n                        );\n                      })\n                    }\n                  </div>\n                </div>\n              :\n                <Col onClick={() => toggleReplies(index)} className=\"showall\">Show {comment.replies.length} Replies</Col>\n              }\n            </Row>\n            :\n            <br/>\n          }\n        </div>\n      );\n    }));\n  }\n\n  useEffect(() => {\n    messageEnd.current.scrollIntoView();\n  }, [comments]);\n\n  return(\n    <div className={view + 'chatbox'}>\n      {view == 'portrait' && (<Toolbar view={view} textRef={textRef} setView={setView}/>)}\n      <div className={view + \"chatdiv\"}>\n        {getTableData(comments)}\n        <div ref={messageEnd} />\n      </div>\n      {view == 'landscape' && (<Toolbar view={view} textRef={textRef} setView={setView}/>)}\n\n      <InputGroup>\n        <Textarea\n          className=\"textarea\"\n          placeholder=\"Add a comment...\"\n          maxLength=\"128\"\n          onChange={e => onTextChange(e)}\n          ref={textRef}\n          onKeyDown={e => {\n            if (e.key === 'Enter') {\n              handlePost();\n              e.stopPropagation();\n            }\n          }}\n        />\n        <InputGroup.Append className=\"post\">\n          <Button onClick={() => handlePost()} variant=\"link\">Post</Button>\n        </InputGroup.Append>\n      </InputGroup>\n    </div>\n  );\n}\n\nChatbox.propTypes = {\n  view: PropTypes.string.isRequired,\n  setView: PropTypes.func.isRequired,\n}\n\nexport default Chatbox;\n"]},"metadata":{},"sourceType":"module"}