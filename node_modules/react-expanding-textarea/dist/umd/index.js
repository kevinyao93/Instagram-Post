(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "react", "react-with-forwarded-ref"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resize = exports.getHeight = void 0;
    var tslib_1 = require("tslib");
    var react_1 = tslib_1.__importStar(require("react"));
    var react_with_forwarded_ref_1 = tslib_1.__importDefault(require("react-with-forwarded-ref"));
    var getHeight = function (rows, el) {
        var _a = window.getComputedStyle(el), borderBottomWidth = _a.borderBottomWidth, borderTopWidth = _a.borderTopWidth, fontSize = _a.fontSize, lineHeight = _a.lineHeight, paddingBottom = _a.paddingBottom, paddingTop = _a.paddingTop;
        var lh = lineHeight === 'normal'
            ? parseFloat(fontSize) * 1.2
            : parseFloat(lineHeight);
        var rowHeight = rows === 0
            ? 0
            : lh * rows +
                parseFloat(borderBottomWidth) +
                parseFloat(borderTopWidth) +
                parseFloat(paddingBottom) +
                parseFloat(paddingTop);
        var scrollHeight = el.scrollHeight + parseFloat(borderBottomWidth) + parseFloat(borderTopWidth);
        return Math.max(rowHeight, scrollHeight);
    };
    exports.getHeight = getHeight;
    var resize = function (rows, el) {
        if (el) {
            var overflowY = 'hidden';
            var maxHeight = window.getComputedStyle(el).maxHeight;
            if (maxHeight !== 'none') {
                var maxHeightN = parseFloat(maxHeight);
                if (maxHeightN < el.scrollHeight) {
                    overflowY = '';
                }
            }
            el.style.height = '0';
            el.style.overflowY = overflowY;
            el.style.height = exports.getHeight(rows, el) + "px";
        }
    };
    exports.resize = resize;
    var ExpandingTextarea = function (_a) {
        var forwardedRef = _a.forwardedRef, props = tslib_1.__rest(_a, ["forwardedRef"]);
        var isForwardedRefFn = typeof forwardedRef === 'function';
        var internalRef = react_1.useRef();
        var ref = (isForwardedRefFn || !forwardedRef ? internalRef : forwardedRef);
        var rows = props.rows ? parseInt('' + props.rows, 10) : 0;
        var onChange = props.onChange, onInput = props.onInput;
        react_1.useEffect(function () {
            exports.resize(rows, ref.current);
        }, [ref, rows, props.value]);
        var handleInput = react_1.useCallback(function (e) {
            if (onChange) {
                onChange(e);
            }
            if (onInput) {
                onInput(e);
            }
            exports.resize(rows, ref.current);
        }, [onChange, onInput, ref, rows]);
        var handleRef = react_1.useCallback(function (node) {
            ref.current = node;
            if (isForwardedRefFn) {
                forwardedRef(node);
            }
        }, [forwardedRef, isForwardedRefFn, ref]);
        return (react_1.default.createElement("textarea", tslib_1.__assign({}, props, { onInput: handleInput, ref: handleRef, rows: rows })));
    };
    exports.default = react_with_forwarded_ref_1.default(ExpandingTextarea);
});
