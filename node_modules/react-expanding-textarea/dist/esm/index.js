import { __assign, __rest } from "tslib";
import React, { useCallback, useEffect, useRef, } from 'react';
import withForwardedRef from 'react-with-forwarded-ref';
export var getHeight = function (rows, el) {
    var _a = window.getComputedStyle(el), borderBottomWidth = _a.borderBottomWidth, borderTopWidth = _a.borderTopWidth, fontSize = _a.fontSize, lineHeight = _a.lineHeight, paddingBottom = _a.paddingBottom, paddingTop = _a.paddingTop;
    var lh = lineHeight === 'normal'
        ? parseFloat(fontSize) * 1.2
        : parseFloat(lineHeight);
    var rowHeight = rows === 0
        ? 0
        : lh * rows +
            parseFloat(borderBottomWidth) +
            parseFloat(borderTopWidth) +
            parseFloat(paddingBottom) +
            parseFloat(paddingTop);
    var scrollHeight = el.scrollHeight + parseFloat(borderBottomWidth) + parseFloat(borderTopWidth);
    return Math.max(rowHeight, scrollHeight);
};
export var resize = function (rows, el) {
    if (el) {
        var overflowY = 'hidden';
        var maxHeight = window.getComputedStyle(el).maxHeight;
        if (maxHeight !== 'none') {
            var maxHeightN = parseFloat(maxHeight);
            if (maxHeightN < el.scrollHeight) {
                overflowY = '';
            }
        }
        el.style.height = '0';
        el.style.overflowY = overflowY;
        el.style.height = getHeight(rows, el) + "px";
    }
};
var ExpandingTextarea = function (_a) {
    var forwardedRef = _a.forwardedRef, props = __rest(_a, ["forwardedRef"]);
    var isForwardedRefFn = typeof forwardedRef === 'function';
    var internalRef = useRef();
    var ref = (isForwardedRefFn || !forwardedRef ? internalRef : forwardedRef);
    var rows = props.rows ? parseInt('' + props.rows, 10) : 0;
    var onChange = props.onChange, onInput = props.onInput;
    useEffect(function () {
        resize(rows, ref.current);
    }, [ref, rows, props.value]);
    var handleInput = useCallback(function (e) {
        if (onChange) {
            onChange(e);
        }
        if (onInput) {
            onInput(e);
        }
        resize(rows, ref.current);
    }, [onChange, onInput, ref, rows]);
    var handleRef = useCallback(function (node) {
        ref.current = node;
        if (isForwardedRefFn) {
            forwardedRef(node);
        }
    }, [forwardedRef, isForwardedRefFn, ref]);
    return (React.createElement("textarea", __assign({}, props, { onInput: handleInput, ref: handleRef, rows: rows })));
};
export default withForwardedRef(ExpandingTextarea);
