[{"/Users/kevinyao/Documents/GitHub/my-app/Instagram-Post/src/index.js":"1","/Users/kevinyao/Documents/GitHub/my-app/Instagram-Post/src/reportWebVitals.js":"2","/Users/kevinyao/Documents/GitHub/my-app/Instagram-Post/src/components/App.js":"3","/Users/kevinyao/Documents/GitHub/my-app/Instagram-Post/src/components/Admin/Admin.js":"4","/Users/kevinyao/Documents/GitHub/my-app/Instagram-Post/src/components/InstagramContainer/InstagramContainer.js":"5","/Users/kevinyao/Documents/GitHub/my-app/Instagram-Post/src/components/Storage/Storage.js":"6","/Users/kevinyao/Documents/GitHub/my-app/Instagram-Post/src/components/Header/Header.js":"7","/Users/kevinyao/Documents/GitHub/my-app/Instagram-Post/src/components/Chatbox/Chatbox.js":"8","/Users/kevinyao/Documents/GitHub/my-app/Instagram-Post/src/components/Toolbar/Toolbar.js":"9"},{"size":558,"mtime":1610840563823,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1610511182623,"results":"12","hashOfConfig":"11"},{"size":334,"mtime":1610910340916,"results":"13","hashOfConfig":"11"},{"size":1307,"mtime":1610912253882,"results":"14","hashOfConfig":"11"},{"size":2031,"mtime":1610920095046,"results":"15","hashOfConfig":"11"},{"size":742,"mtime":1610912735642,"results":"16","hashOfConfig":"11"},{"size":1190,"mtime":1610912698632,"results":"17","hashOfConfig":"11"},{"size":13703,"mtime":1610920261684,"results":"18","hashOfConfig":"11"},{"size":2951,"mtime":1610920513463,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"a4l26i",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},"/Users/kevinyao/Documents/GitHub/my-app/Instagram-Post/src/index.js",[],["42","43"],"/Users/kevinyao/Documents/GitHub/my-app/Instagram-Post/src/reportWebVitals.js",[],"/Users/kevinyao/Documents/GitHub/my-app/Instagram-Post/src/components/App.js",[],"/Users/kevinyao/Documents/GitHub/my-app/Instagram-Post/src/components/Admin/Admin.js",[],"/Users/kevinyao/Documents/GitHub/my-app/Instagram-Post/src/components/InstagramContainer/InstagramContainer.js",["44"],"import React, {useState, useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport './InstagramContainer.css'\nimport { Image, Row, Col } from \"react-bootstrap\";\n\nimport Header from '../Header/Header.js';\nimport Chatbox from '../Chatbox/Chatbox.js';\n\n// Container for the entire instagram view\nconst InstagramContainer = ({defaultView}) => {\n  const [view, setView] = useState(defaultView);\n  const [hide, setHide] = useState(false);\n\n  // Updates when window changes to know when to hide the chat window\n  useEffect(() => {\n    const resizeListener = () => {\n      if (view === 'landscape') {\n        if (window.innerWidth < 1000) {\n          setHide(true);\n        } else {\n          setHide(false);\n        }\n      }\n    }\n    window.addEventListener('resize', resizeListener);\n    return() => {\n      window.removeEventListener('resize', resizeListener);\n    }\n  })\n  return(\n      <div>\n        {view == \"portrait\" ?\n          <div className={view}>\n            <Header />\n            <Image className=\"mimage\" src=\"nvidia-communities.jpg\" />\n            <Chatbox view={view} setView={setView}/>\n          </div>\n          :\n          <div>\n            { !hide ? (\n              <Row className={view}>\n                <Col className=\"landscapeImage\">\n                  <Image className=\"mimage\" src=\"nvidia-communities.jpg\" />\n                </Col>\n                <Col className=\"landscapechat\">\n                  <Header />\n                  <Chatbox view={view} setView={setView} />\n                </Col>\n              </Row>\n            ) : (\n              <div className={'portrait'}>\n                <Header />\n                <Image className=\"mimage\" src=\"nvidia-communities.jpg\" />\n                <Chatbox view={view} setView={setView} hide={hide}/>\n              </div>\n            )}\n          </div>\n        }\n      </div>\n\n  );\n}\n\nInstagramContainer.propTypes = {\n  defaultView: PropTypes.string,\n}\n\nInstagramContainer.defaultProps = {\n  defaultView: 'portrait',\n}\n\nexport default InstagramContainer;\n","/Users/kevinyao/Documents/GitHub/my-app/Instagram-Post/src/components/Storage/Storage.js",[],"/Users/kevinyao/Documents/GitHub/my-app/Instagram-Post/src/components/Header/Header.js",[],"/Users/kevinyao/Documents/GitHub/my-app/Instagram-Post/src/components/Chatbox/Chatbox.js",["45","46","47","48","49"],"import React, { useRef, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Chatbox.css';\n\nimport {Image, InputGroup, Button, Row, Col, Modal} from 'react-bootstrap';\nimport Textarea from 'react-expanding-textarea';\nimport { BsHeartFill, BsHeart } from \"react-icons/bs\";\nimport ReactTooltip from 'react-tooltip';\n\nimport Toolbar from '../Toolbar/Toolbar.js';\nimport InstagramContainer from '../InstagramContainer/InstagramContainer.js';\nimport { commentStorage, statusStorage } from '../Storage/Storage.js';\n\nconst Chatbox = ({view, setView, hide}) => {\n  const [comments, setComments] = commentStorage();\n  const [status, setStatus] = statusStorage();\n\n  // Area for modal management\n  const [showViewAll, setShowViewAll] = useState(false);\n  const [showCommentSetting, setShowCommentSetting] = useState({open: false, index: null, rIndex: null});\n\n  const handleCloseViewAll = () => setShowViewAll(false);\n  const handleShowViewAll = () => setShowViewAll(true);\n  const handleCloseSetting = (index, rIndex) => setShowCommentSetting({open: false, index, rIndex});\n  const handleShowSetting = (index, rIndex) => setShowCommentSetting({open: true, index, rIndex});\n\n  const textRef = useRef(null);\n  const messageEnd = useRef(null);\n\n  const timeConversion = milliseconds => {\n    // Converts milliseconds into the largest unit of time (limited to days)\n    const days = (milliseconds / (1000 * 60 * 60 * 24)).toFixed(0);\n    if (days > 0) return `${days}d`;\n    const hours = (milliseconds / (1000 * 60 * 60)).toFixed(0);\n    if (hours > 0) return `${hours}h`;\n    const minutes = (milliseconds / (1000 * 60)).toFixed(0);\n    if (minutes > 0) return `${minutes}m`;\n    const seconds = (milliseconds / 1000).toFixed(0);\n    return `${seconds}s`;\n  }\n\n  const onReplyClick = (index, reply) => {\n    // Focuses on the text box and remembers the current target for reply\n    textRef.current.value = `@${reply.name} `;\n    setStatus({...status, replyTarget: index});\n    textRef.current.focus();\n  }\n\n  const onTextChange = e => {\n    // Will check if the target of reply is still accurate, if the @ target is removed, also remove the target\n    if (status.replyTarget !== -1 && !e.target.value.includes(`@${comments[status.replyTarget].name}`)) {\n      setStatus({...status, replyTarget: -1});\n    }\n  }\n\n  const tooltipClick = (index, rIndex) => {\n    // Tooltips to show message settings i.e. deletion\n    return (\n      <div onClick={() => handleShowSetting(index, rIndex)}>\n        ...\n      </div>\n    );\n  }\n\n  const portraitTable = values => {\n    // Will display the chat in the portrait format\n    let expand = false;\n    return (values.map((comment, index) => {\n      // Map out the comments into the chat box\n      if ([0, 1, values.length - 2, values.length - 1].includes(index)) {\n        return(\n          <Row key={index}>\n            <Col className=\"comment\">\n              <b>{comment.name}</b> {comment.comment}\n            </Col>\n            <Col xs=\"auto\" className=\"heart\">\n              {isCommentLiked(index) ?\n                <BsHeartFill onClick={() => likedComment(index)}/> :\n                <BsHeart onClick={() => likedComment(index)}/>}\n            </Col>\n          </Row>\n        );\n      }\n      if (!expand) {\n        // Exceeds the length setaside for this view, give the option to show all\n        // as a popup modal.\n        expand = true;\n        return(\n          <Row key={index}>\n            <Col>\n              <p onClick={handleShowViewAll}>View all {values.length - 4} comments</p>\n            </Col>\n            <Modal className=\"lsmodal\" centered show={showViewAll} onHide={handleCloseViewAll}>\n              <Modal.Body>\n                <InstagramContainer defaultView='landscape'/>\n              </Modal.Body>\n            </Modal>\n          </Row>\n        );\n      }\n    }));\n  }\n\n  const toggleReplies = index => {\n    // Decide whether comment should show all of the replies\n    let newComments = comments;\n    newComments[index].showAll = !newComments[index].showAll;\n    setComments(newComments);\n  }\n\n  const handlePost = () => {\n    // Handles message submission\n    if(!/^\\s*$/.test(textRef.current.value)) {\n      // Prevents message submission if message only consists of empty space\n      const messageObject = {\n        name: status.currentUser.name,\n        comment: textRef.current.value,\n        replies: [],\n        liked: [],\n        image: status.currentUser.image,\n        showAll: false,\n        postTime: new Date().getTime(),\n      }\n      // Determine if this message was a reply or regular message\n      if (status.replyTarget === -1) {\n        setComments([...comments, messageObject]);\n      } else {\n        let newComments = comments;\n        const replies = newComments[status.replyTarget].replies;\n        newComments[status.replyTarget].replies = [...replies, messageObject];\n        setComments(newComments);\n      }\n      // Empty the chat box\n      textRef.current.value = '';\n    }\n    setStatus({...status, replyTarget: -1});\n  }\n\n  const isCommentLiked = liked => {\n    // Determine if the current user liked the comment\n    for (let i = 0; i < liked.length; i += 1) {\n      if (liked[i].name === status.currentUser.name) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  const likedComment = (index, rIndex) => {\n    // Check whether or not if message is comment or reply was liked and toggle them\n    let newComments = comments;\n    let addUser = true;\n    if (rIndex === -1) {\n      // Message is a comment, so add user to the liked\n      for (let i = 0; i < comments[index].liked.length; i += 1) {\n        if (comments[index].liked[i].name === status.currentUser.name) {\n          newComments[index].liked.splice(i, 1);\n          addUser = false;\n        }\n      }\n      if (addUser) {\n        newComments[index].liked = [...newComments[index].liked, status.currentUser];\n      }\n    } else {\n      const replies = comments[index].replies[rIndex];\n      for (let i = 0; i < replies.liked.length; i += 1) {\n        if (replies.liked[i].name === status.currentUser.name) {\n          replies.liked.splice(i, 1);\n          addUser = false;\n        }\n      }\n      if (addUser) {\n        replies.liked = [...replies.liked, status.currentUser];\n      }\n      newComments[index].replies[rIndex] = replies;\n    }\n    setComments(newComments);\n  }\n\n  const deleteComment = (index, rIndex) => {\n    // Delete comment from either the messages or replies of message\n    let newComments = comments;\n    if (rIndex > -1) {\n      newComments[index].replies.splice(rIndex, 1);\n    } else {\n      newComments.splice(index, 1);\n    }\n    // Close the popup module\n    handleCloseSetting();\n    setComments(newComments);\n  }\n\n  const canDelete = (index, rIndex) => {\n    // Check whether or not the user is the one who created the comment\n    if (rIndex > -1) {\n      return (comments[index].replies[rIndex].name === status.currentUser.name)\n    }\n    return comments[index].name === status.currentUser.name;\n  }\n\n  const getTableData = values => {\n    // Generate the chat table\n    const currentTime = new Date().getTime();\n    if (view == 'portrait') {\n      return portraitTable(values);\n    }\n    // Generate landscape view\n    return (values.map((comment, index) => {\n      return(\n        <div key={index}>\n          <Modal className='lsmodal' centered show={showCommentSetting.open} onHide={handleCloseSetting}>\n            <Modal.Body>\n              {\n                // Modal view for settings, determine whether or not to show delete button\n                showCommentSetting.open && canDelete(showCommentSetting.index, showCommentSetting.rIndex) && (\n                  <Button\n                    onClick={() => deleteComment(showCommentSetting.index, showCommentSetting.rIndex)}\n                    className=\"settingsbutton\" variant=\"outline-danger\" size=\"lg\" block\n                  >\n                    Delete\n                  </Button>\n                )\n              }\n              <Button onClick={handleCloseSetting} className=\"settingsbutton\" variant=\"outline-secondary\" size=\"lg\" block>\n                Cancel\n              </Button>\n            </Modal.Body>\n          </Modal>\n          <ReactTooltip\n            arrowColor=\"transparent\"\n            className=\"rttooltip\"\n            id=\"rtTooltip\"\n            clickable={true}\n            place='left'\n            effect=\"solid\"\n            offset={{right:'380px'}}\n          >\n            {tooltipClick(index, -1)}\n          </ReactTooltip>\n          <Row data-tip data-for='rtTooltip'>\n            <Col xs=\"auto\">\n              <Image className='chatimage' src={comment.image} roundedCircle />\n            </Col>\n            <Col className=\"lscomment\">\n              <b>{comment.name}</b> {comment.comment}\n            </Col>\n            <Col className=\"heart\" xs=\"auto\">\n              {isCommentLiked(comment.liked) ?\n                <BsHeartFill onClick={() => likedComment(index, -1)}/> :\n                <BsHeart onClick={() => likedComment(index, -1)}/>}\n            </Col>\n          </Row>\n          <Row>\n            <Col className=\"commentdetails\" xs=\"auto\">\n              {timeConversion(currentTime - comment.postTime)}\n            </Col>\n            <Col className=\"commentdetails\" xs=\"auto\">\n              {comment.liked.length} Likes\n            </Col>\n            <Col className=\"commentdetails\" xs=\"auto\" onClick={() => onReplyClick(index, comment)}>\n              Reply\n            </Col>\n          </Row>\n          {comment.replies.length > 0 ?\n            <Row>\n              {comment.showAll ?\n                <div style={{width: '100%'}}>\n                  <Col onClick={() => toggleReplies(index)} className=\"showall\">Hide Replies</Col>\n                  <div className=\"replydiv\">\n                    {\n                      comment.replies.map((reply, rIndex) => {\n                        return (\n                          <div key={rIndex}>\n                            <ReactTooltip\n                              arrowColor=\"transparent\"\n                              className=\"rttooltip\"\n                              id=\"replyTooltip\"\n                              clickable={true}\n                              place='left'\n                              effect=\"solid\"\n                              offset={{right:'320px'}}\n                            >\n                              {tooltipClick(index, rIndex)}\n                            </ReactTooltip>\n                            <Row className=\"replyrow\" data-tip data-for='replyTooltip'>\n                              <Col className=\"icon\" xs=\"auto\">\n                                <Image className='chatimage' src={reply.image} roundedCircle />\n                              </Col>\n                              <Col className=\"lscomment\">\n                                <b>{reply.name}</b> {reply.comment}\n                              </Col>\n                              <Col className=\"heart\" xs=\"auto\">\n                                {isCommentLiked(reply.liked) ?\n                                  <BsHeartFill onClick={() => likedComment(index, rIndex)}/> :\n                                  <BsHeart onClick={() => likedComment(index, rIndex)}/>}\n                              </Col>\n                            </Row>\n                            <Row>\n                              <Col className=\"commentdetails\" xs=\"auto\">\n                                {timeConversion(currentTime - reply.postTime)}\n                              </Col>\n                              <Col className=\"commentdetails\" xs=\"auto\">\n                                {reply.liked.length} Likes\n                              </Col>\n                              <Col className=\"commentdetails\" xs=\"auto\" onClick={() => onReplyClick(index, reply)}>\n                                Reply\n                              </Col>\n                            </Row>\n                          </div>\n                        );\n                      })\n                    }\n                  </div>\n                </div>\n              :\n                <Col onClick={() => toggleReplies(index)} className=\"showall\">Show {comment.replies.length} Replies</Col>\n              }\n            </Row>\n            :\n            <br/>\n          }\n        </div>\n      );\n    }));\n  }\n\n  useEffect(() => {\n    // Scroll to the end of the chat everytime the comments change\n    if (!hide) {\n      messageEnd.current.scrollIntoView();\n    }\n  }, [comments]);\n\n  return(\n    <div className={view + 'chatbox'}>\n      {view == 'portrait' && (<Toolbar view={view} textRef={textRef} setView={setView}/>)}\n      {!hide && (\n        <div className={view + \"chatdiv\"}>\n          {getTableData(comments)}\n          <div ref={messageEnd} />\n        </div>\n      )}\n      {view == 'landscape' && (<Toolbar view={view} textRef={textRef} setView={setView}/>)}\n      {!hide && (\n        <InputGroup>\n          <Textarea\n            className=\"textarea\"\n            placeholder=\"Add a comment...\"\n            maxLength=\"128\"\n            onChange={e => onTextChange(e)}\n            ref={textRef}\n            onKeyDown={e => {\n              if (e.key === 'Enter') {\n                e.preventDefault();\n                handlePost();\n              }\n            }}\n          />\n          <InputGroup.Append className=\"post\">\n            <Button onClick={() => handlePost()} variant=\"link\">Post</Button>\n          </InputGroup.Append>\n        </InputGroup>\n      )}\n      </div>\n  );\n}\n\nChatbox.propTypes = {\n  view: PropTypes.string.isRequired,\n  setView: PropTypes.func.isRequired,\n  hide: PropTypes.bool,\n}\n\nChatbox.defaultProps = {\n  hide: false,\n}\n\nexport default Chatbox;\n","/Users/kevinyao/Documents/GitHub/my-app/Instagram-Post/src/components/Toolbar/Toolbar.js",["50"],"import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Toolbar.css';\n\nimport { statusStorage } from '../Storage/Storage.js';\n\nimport { BsHeartFill, BsHeart, BsUpload, BsBookmark, BsBookmarkFill, BsChat } from \"react-icons/bs\";\nimport { Modal } from \"react-bootstrap\";\n\n// Toolbar with all the icons in it\nconst Toolbar = ({view, setView, textRef}) => {\n  const [status, setStatus] = statusStorage();\n\n  const [show, setShow] = useState(false);\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  const toggleComment = field => {\n    // Toggles whether or not the user has liked/bookmarked the post\n    let addUser = true;\n    let newStatus = status;\n    for (let i = 0; i < newStatus[field].length; i += 1) {\n      if (newStatus[field][i].name === newStatus.currentUser.name) {\n        // User has already liked the post, have them unlike it\n        newStatus[field].splice(i, 1);\n        addUser = false;\n      }\n    }\n    if (addUser) {\n      // The user is not within the liked array, add them to it.\n      newStatus[field] = [...newStatus[field], status.currentUser];\n    }\n    setStatus(newStatus)\n  }\n\n  const fieldIncludesUser = field => {\n    // Check if the user is liked\n    for (let i = 0; i < status[field].length; i += 1) {\n      if (status[field][i].name === status.currentUser.name) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  const chatClicked = () => {\n    // Switch to landscape view, and focus on the input area\n    if (view == 'portrait') {\n      setView('landscape');\n    }\n    textRef.current.focus();\n  }\n\n  return(\n    <div>\n      <table>\n        <tbody>\n          <tr>\n            <td className=\"lefticons\">\n              {fieldIncludesUser('liked') ?\n                <BsHeartFill onClick={() => toggleComment('liked')}/> :\n                <BsHeart onClick={() => toggleComment('liked')}/>}\n            </td>\n            <td className=\"lefticons\">\n              <BsChat onClick={() => chatClicked()}/>\n            </td>\n            <td className=\"lefticons\">\n              <Modal show={show} centered onHide={handleClose}>\n                <Modal.Body>\n                  Sharing\n                </Modal.Body>\n              </Modal>\n              <BsUpload onClick={handleShow}/>\n            </td>\n            <td className=\"righticon\">\n              {fieldIncludesUser('bookmarked') ?\n                <BsBookmarkFill onClick={() => toggleComment('bookmarked')}/> :\n                <BsBookmark onClick={() => toggleComment('bookmarked')}/>}\n            </td>\n          </tr>\n          <tr>\n            <td className=\"liketext\" colSpan=\"2\"><b>{status.liked.length} {status.liked.length === 1 ? 'like' : 'likes'}</b></td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nToolbar.propTypes = {\n  view: PropTypes.string.isRequired,\n  setView: PropTypes.func.isRequired,\n  textRef: PropTypes.object,\n}\n\nexport default Toolbar;\n",{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":32,"column":15,"nodeType":"57","messageId":"58","endLine":32,"endColumn":17},{"ruleId":"59","severity":1,"message":"60","line":69,"column":41,"nodeType":"61","messageId":"62","endLine":69,"endColumn":43},{"ruleId":"55","severity":1,"message":"56","line":205,"column":14,"nodeType":"57","messageId":"58","endLine":205,"endColumn":16},{"ruleId":"63","severity":1,"message":"64","line":333,"column":6,"nodeType":"65","endLine":333,"endColumn":16,"suggestions":"66"},{"ruleId":"55","severity":1,"message":"56","line":337,"column":13,"nodeType":"57","messageId":"58","endLine":337,"endColumn":15},{"ruleId":"55","severity":1,"message":"56","line":344,"column":13,"nodeType":"57","messageId":"58","endLine":344,"endColumn":15},{"ruleId":"55","severity":1,"message":"56","line":49,"column":14,"nodeType":"57","messageId":"58","endLine":49,"endColumn":16},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'hide'. Either include it or remove the dependency array.","ArrayExpression",["69"],"no-global-assign","no-unsafe-negation",{"desc":"70","fix":"71"},"Update the dependencies array to be: [comments, hide]",{"range":"72","text":"73"},[12491,12501],"[comments, hide]"]