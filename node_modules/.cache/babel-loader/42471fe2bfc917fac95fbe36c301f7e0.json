{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/kevinyao/Documents/GitHub/create-react-app/my-app/src/components/Chatbox/Chatbox.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport './Chatbox.css';\nimport { Image, InputGroup, Button, Row, Col } from 'react-bootstrap';\nimport Textarea from 'react-expanding-textarea';\nimport { BsHeartFill, BsHeart } from \"react-icons/bs\";\nimport Toolbar from '../Toolbar/Toolbar.js';\nimport { commentStorage, statusStorage } from '../Storage/Storage.js';\n\nconst Chatbox = ({\n  view,\n  setView\n}) => {\n  _s();\n\n  const [comments, setComments] = commentStorage();\n  const [status, setStatus] = statusStorage();\n  const textRef = useRef(null);\n  const messageEnd = useRef(null);\n\n  const onReplyClick = index => {\n    textRef.current.value = `@${comments[index].name} `;\n    setStatus({ ...status,\n      replyTarget: index\n    });\n    textRef.current.focus();\n  };\n\n  const onTextChange = e => {\n    if (e.target.value === '') {\n      setStatus({ ...status,\n        replyTarget: -1\n      });\n    }\n  };\n\n  function getTableData(values) {\n    if (view == 'portrait') {\n      let expand = false;\n      return values.map((comment, index) => {\n        if ([0, 1, values.length - 2, values.length - 1].includes(index)) {\n          return /*#__PURE__*/_jsxDEV(Row, {\n            children: [/*#__PURE__*/_jsxDEV(Col, {\n              className: \"comment\",\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: comment.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 39,\n                columnNumber: 17\n              }, this), \" \", comment.comment]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              xs: \"auto\",\n              className: \"heart\",\n              children: isCommentLiked(index) ? /*#__PURE__*/_jsxDEV(BsHeartFill, {\n                onClick: () => likedComment(index)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 43,\n                columnNumber: 19\n              }, this) : /*#__PURE__*/_jsxDEV(BsHeart, {\n                onClick: () => likedComment(index)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 44,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 15\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }, this);\n        }\n\n        if (!expand) {\n          expand = true;\n          return /*#__PURE__*/_jsxDEV(Row, {\n            children: /*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                onClick: () => setView('landscape'),\n                children: [\"View all \", values.length - 4, \" comments\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 54,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 15\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this);\n        }\n      });\n    }\n\n    return values.map((comment, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            xs: \"auto\",\n            children: /*#__PURE__*/_jsxDEV(Image, {\n              className: \"chatimage\",\n              src: comment.image,\n              roundedCircle: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            className: \"comment\",\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: comment.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 15\n            }, this), \" \", comment.comment]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            className: \"heart\",\n            xs: \"auto\",\n            children: isCommentLiked(comment.liked) ? /*#__PURE__*/_jsxDEV(BsHeartFill, {\n              onClick: () => likedComment(index)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(BsHeart, {\n              onClick: () => likedComment(index)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            className: \"commentdetails\",\n            xs: \"auto\",\n            children: \"1 Day\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            className: \"commentdetails\",\n            xs: \"auto\",\n            children: [comment.liked.length, \" Likes\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            className: \"commentdetails\",\n            xs: \"auto\",\n            onClick: () => onReplyClick(index),\n            children: \"Reply\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), comment.replies.length > 0 ? /*#__PURE__*/_jsxDEV(Row, {\n          children: comment.showAll ? /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: '100%'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Col, {\n              onClick: () => toggleReplies(index),\n              className: \"showall\",\n              children: \"Hide Replies\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"replydiv\",\n              children: comment.replies.map((reply, rIndex) => {\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(Row, {\n                    className: \"replyrow\",\n                    children: [/*#__PURE__*/_jsxDEV(Col, {\n                      className: \"icon\",\n                      xs: \"auto\",\n                      children: /*#__PURE__*/_jsxDEV(Image, {\n                        className: \"chatimage\",\n                        src: comment.image,\n                        roundedCircle: true\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 100,\n                        columnNumber: 33\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 99,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(Col, {\n                      className: \"comment\",\n                      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                        children: comment.name\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 103,\n                        columnNumber: 33\n                      }, this), \" \", comment.comment]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 102,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(Col, {\n                      className: \"heart\",\n                      xs: \"auto\",\n                      children: isCommentLiked(reply.liked) ? /*#__PURE__*/_jsxDEV(BsHeartFill, {\n                        onClick: () => likedReply(index, rIndex)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 107,\n                        columnNumber: 35\n                      }, this) : /*#__PURE__*/_jsxDEV(BsHeart, {\n                        onClick: () => likedReply(index, rIndex)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 108,\n                        columnNumber: 35\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 105,\n                      columnNumber: 31\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 98,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(Row, {\n                    children: [/*#__PURE__*/_jsxDEV(Col, {\n                      className: \"commentdetails\",\n                      xs: \"auto\",\n                      children: \"1 Day\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 112,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(Col, {\n                      className: \"commentdetails\",\n                      xs: \"auto\",\n                      children: [comment.liked.length, \" Likes\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 115,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(Col, {\n                      className: \"commentdetails\",\n                      xs: \"auto\",\n                      onClick: () => onReplyClick(index),\n                      children: \"Reply\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 118,\n                      columnNumber: 31\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 111,\n                    columnNumber: 29\n                  }, this)]\n                }, rIndex, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 97,\n                  columnNumber: 27\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(Col, {\n            onClick: () => toggleReplies(index),\n            className: \"showall\",\n            children: [\"Show \", comment.replies.length, \" Replies\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this);\n    });\n  }\n\n  const toggleReplies = index => {\n    let newComments = comments;\n    newComments[index].showAll = !newComments[index].showAll;\n    setComments(newComments);\n  };\n\n  const handlePost = () => {\n    if (textRef.current.value) {\n      const messageObject = {\n        name: status.currentUser.name,\n        comment: textRef.current.value,\n        replies: [],\n        liked: [],\n        image: status.currentUser.image,\n        showAll: false\n      };\n\n      if (status.replyTarget === -1) {\n        setComments([...comments, messageObject]);\n      } else {\n        let newComments = comments;\n        const replies = newComments[status.replyTarget].replies;\n        newComments[status.replyTarget].replies = [...replies, messageObject];\n        setComments(newComments);\n      }\n\n      textRef.current.value = '';\n    }\n\n    setStatus({ ...status,\n      replyTarget: -1\n    });\n  };\n\n  const isCommentLiked = liked => {\n    for (let i = 0; i < liked.length; i += 1) {\n      if (liked[i].name === status.currentUser.name) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  const likedReply = (index, rIndex) => {\n    let newComments = comments;\n    let addUser = true;\n    const replies = comments[index].replies[rIndex];\n\n    for (let i = 0; i < replies.liked.length; i += 1) {\n      if (replies.liked[i].name === status.currentUser.name) {\n        replies.liked.splice(i, 1);\n        addUser = false;\n      }\n    }\n\n    if (addUser) {\n      replies.liked = [...replies.liked, status.currentUser];\n    }\n\n    newComments[index].replies[rIndex] = replies;\n    setComments(newComments);\n  };\n\n  const likedComment = index => {\n    let newComments = comments;\n    let addUser = true;\n\n    for (let i = 0; i < comments[index].liked.length; i += 1) {\n      if (comments[index].liked[i].name === status.currentUser.name) {\n        newComments[index].liked.splice(i, 1);\n        addUser = false;\n      }\n    }\n\n    if (addUser) {\n      newComments[index].liked = [...newComments[index].liked, status.currentUser];\n    }\n\n    setComments(newComments);\n  };\n\n  useEffect(() => {\n    messageEnd.current.scrollIntoView();\n  }, [comments]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: view + 'chatbox',\n    children: [view == 'portrait' ? /*#__PURE__*/_jsxDEV(Toolbar, {\n      view: view,\n      textRef: textRef,\n      setView: setView\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 29\n    }, this) : '', /*#__PURE__*/_jsxDEV(\"div\", {\n      className: view + \"chatdiv\",\n      children: [getTableData(comments), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messageEnd\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this), view == 'landscape' ? /*#__PURE__*/_jsxDEV(Toolbar, {\n      view: view,\n      textRef: textRef,\n      setView: setView\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 30\n    }, this) : '', /*#__PURE__*/_jsxDEV(InputGroup, {\n      children: [/*#__PURE__*/_jsxDEV(Textarea, {\n        className: \"textarea\",\n        placeholder: \"Add a comment...\",\n        maxLength: \"128\",\n        onChange: e => onTextChange(e),\n        ref: textRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputGroup.Append, {\n        className: \"post\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => handlePost(),\n          variant: \"link\",\n          children: \"Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Chatbox, \"MjmBKMPzJweKDtmSpkm5gzU1uqQ=\");\n\n_c = Chatbox;\nChatbox.propTypes = {\n  view: PropTypes.string.isRequired,\n  setView: PropTypes.func.isRequired\n};\nexport default Chatbox;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chatbox\");","map":{"version":3,"sources":["/Users/kevinyao/Documents/GitHub/create-react-app/my-app/src/components/Chatbox/Chatbox.js"],"names":["React","useRef","useEffect","PropTypes","Image","InputGroup","Button","Row","Col","Textarea","BsHeartFill","BsHeart","Toolbar","commentStorage","statusStorage","Chatbox","view","setView","comments","setComments","status","setStatus","textRef","messageEnd","onReplyClick","index","current","value","name","replyTarget","focus","onTextChange","e","target","getTableData","values","expand","map","comment","length","includes","isCommentLiked","likedComment","image","liked","replies","showAll","width","toggleReplies","reply","rIndex","likedReply","newComments","handlePost","messageObject","currentUser","i","addUser","splice","scrollIntoView","propTypes","string","isRequired","func"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Chatbox.css';\n\nimport {Image, InputGroup, Button, Row, Col} from 'react-bootstrap';\nimport Textarea from 'react-expanding-textarea';\nimport { BsHeartFill, BsHeart } from \"react-icons/bs\";\n\nimport Toolbar from '../Toolbar/Toolbar.js';\nimport { commentStorage, statusStorage } from '../Storage/Storage.js';\n\nconst Chatbox = ({view, setView}) => {\n  const [comments, setComments] = commentStorage();\n  const [status, setStatus] = statusStorage();\n  const textRef = useRef(null);\n  const messageEnd = useRef(null);\n\n  const onReplyClick = index => {\n    textRef.current.value = `@${comments[index].name} `;\n    setStatus({...status, replyTarget: index});\n    textRef.current.focus();\n  }\n\n  const onTextChange = e => {\n    if (e.target.value === '') {\n      setStatus({...status, replyTarget: -1});\n    }\n  }\n\n  function getTableData(values) {\n    if (view == 'portrait') {\n      let expand = false;\n      return (values.map((comment, index) => {\n        if ([0, 1, values.length - 2, values.length - 1].includes(index)) {\n          return(\n            <Row key={index}>\n              <Col className=\"comment\">\n                <b>{comment.name}</b> {comment.comment}\n              </Col>\n              <Col xs=\"auto\" className=\"heart\">\n                {isCommentLiked(index) ?\n                  <BsHeartFill onClick={() => likedComment(index)}/> :\n                  <BsHeart onClick={() => likedComment(index)}/>}\n              </Col>\n            </Row>\n          );\n        }\n        if (!expand) {\n          expand = true;\n          return(\n            <Row key={index}>\n              <Col>\n                <p onClick={() => setView('landscape')}>View all {values.length - 4} comments</p>\n              </Col>\n            </Row>\n          );\n        }\n      }));\n    }\n    return (values.map((comment, index) => {\n      return(\n        <div key={index}>\n          <Row>\n            <Col xs=\"auto\">\n              <Image className='chatimage' src={comment.image} roundedCircle />\n            </Col>\n            <Col className=\"comment\">\n              <b>{comment.name}</b> {comment.comment}\n            </Col>\n            <Col className=\"heart\" xs=\"auto\">\n              {isCommentLiked(comment.liked) ?\n                <BsHeartFill onClick={() => likedComment(index)}/> :\n                <BsHeart onClick={() => likedComment(index)}/>}\n            </Col>\n          </Row>\n          <Row>\n            <Col className=\"commentdetails\" xs=\"auto\">\n              1 Day\n            </Col>\n            <Col className=\"commentdetails\" xs=\"auto\">\n              {comment.liked.length} Likes\n            </Col>\n            <Col className=\"commentdetails\" xs=\"auto\" onClick={() => onReplyClick(index)}>\n              Reply\n            </Col>\n          </Row>\n          {comment.replies.length > 0 ?\n            <Row>\n              {comment.showAll ?\n                <div style={{width: '100%'}}>\n                  <Col onClick={() => toggleReplies(index)} className=\"showall\">Hide Replies</Col>\n                  <div className=\"replydiv\">\n                    {\n                      comment.replies.map((reply, rIndex) => {\n                        return (\n                          <div key={rIndex}>\n                            <Row className=\"replyrow\">\n                              <Col className=\"icon\" xs=\"auto\">\n                                <Image className='chatimage' src={comment.image} roundedCircle />\n                              </Col>\n                              <Col className=\"comment\">\n                                <b>{comment.name}</b> {comment.comment}\n                              </Col>\n                              <Col className=\"heart\" xs=\"auto\">\n                                {isCommentLiked(reply.liked) ?\n                                  <BsHeartFill onClick={() => likedReply(index, rIndex)}/> :\n                                  <BsHeart onClick={() => likedReply(index, rIndex)}/>}\n                              </Col>\n                            </Row>\n                            <Row>\n                              <Col className=\"commentdetails\" xs=\"auto\">\n                                1 Day\n                              </Col>\n                              <Col className=\"commentdetails\" xs=\"auto\">\n                                {comment.liked.length} Likes\n                              </Col>\n                              <Col className=\"commentdetails\" xs=\"auto\" onClick={() => onReplyClick(index)}>\n                                Reply\n                              </Col>\n                            </Row>\n                          </div>\n                        );\n                      })\n                    }\n                  </div>\n                </div>\n              :\n                <Col onClick={() => toggleReplies(index)} className=\"showall\">Show {comment.replies.length} Replies</Col>\n              }\n            </Row>\n            :\n            <br/>\n          }\n        </div>\n      );\n    }));\n  }\n\n  const toggleReplies = index => {\n    let newComments = comments;\n    newComments[index].showAll = !newComments[index].showAll;\n    setComments(newComments);\n  }\n\n  const handlePost = () => {\n    if(textRef.current.value) {\n      const messageObject = {\n        name: status.currentUser.name,\n        comment: textRef.current.value,\n        replies: [],\n        liked: [],\n        image: status.currentUser.image,\n        showAll: false,\n      }\n      if (status.replyTarget === -1) {\n        setComments([...comments, messageObject]);\n      } else {\n        let newComments = comments;\n        const replies = newComments[status.replyTarget].replies;\n        newComments[status.replyTarget].replies = [...replies, messageObject];\n        setComments(newComments);\n      }\n      textRef.current.value = '';\n    }\n    setStatus({...status, replyTarget: -1});\n  }\n\n  const isCommentLiked = liked => {\n    for (let i = 0; i < liked.length; i += 1) {\n      if (liked[i].name === status.currentUser.name) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  const likedReply = (index, rIndex) => {\n    let newComments = comments;\n    let addUser = true;\n    const replies = comments[index].replies[rIndex];\n    for (let i = 0; i < replies.liked.length; i += 1) {\n      if (replies.liked[i].name === status.currentUser.name) {\n        replies.liked.splice(i, 1);\n        addUser = false;\n      }\n    }\n    if (addUser) {\n      replies.liked = [...replies.liked, status.currentUser];\n    }\n    newComments[index].replies[rIndex] = replies\n    setComments(newComments);\n  }\n\n  const likedComment = index => {\n    let newComments = comments;\n    let addUser = true;\n    for (let i = 0; i < comments[index].liked.length; i += 1) {\n      if (comments[index].liked[i].name === status.currentUser.name) {\n        newComments[index].liked.splice(i, 1);\n        addUser = false;\n      }\n    }\n    if (addUser) {\n      newComments[index].liked = [...newComments[index].liked, status.currentUser];\n    }\n    setComments(newComments);\n  }\n\n  useEffect(() => {\n    messageEnd.current.scrollIntoView();\n  }, [comments]);\n\n  return(\n    <div className={view + 'chatbox'}>\n      {view == 'portrait' ? <Toolbar view={view} textRef={textRef} setView={setView}/> : ''}\n      <div className={view + \"chatdiv\"}>\n        {getTableData(comments)}\n        <div ref={messageEnd} />\n      </div>\n      {view == 'landscape' ? <Toolbar view={view} textRef={textRef} setView={setView}/> : ''}\n\n      <InputGroup>\n        <Textarea\n          className=\"textarea\"\n          placeholder=\"Add a comment...\"\n          maxLength=\"128\"\n          onChange={e => onTextChange(e)}\n          ref={textRef}\n        />\n        <InputGroup.Append className=\"post\">\n          <Button onClick={() => handlePost()} variant=\"link\">Post</Button>\n        </InputGroup.Append>\n      </InputGroup>\n    </div>\n  );\n}\n\nChatbox.propTypes = {\n  view: PropTypes.string.isRequired,\n  setView: PropTypes.func.isRequired,\n}\n\nexport default Chatbox;\n"]},"metadata":{},"sourceType":"module"}