{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst react_1 = require(\"react\");\n\nfunction parseJSON(value) {\n  return value === 'undefined' ? undefined : JSON.parse(value !== null && value !== void 0 ? value : '');\n}\n\nconst data = {};\nconst storage = {\n  get(key, defaultValue) {\n    var _a;\n\n    try {\n      return (_a = data[key]) !== null && _a !== void 0 ? _a : parseJSON(localStorage.getItem(key));\n    } catch (_b) {\n      return defaultValue;\n    }\n  },\n\n  set(key, value) {\n    try {\n      localStorage.setItem(key, JSON.stringify(value));\n      data[key] = undefined;\n      return true;\n    } catch (_a) {\n      data[key] = value;\n      return false;\n    }\n  },\n\n  remove(key) {\n    data[key] = undefined;\n\n    try {\n      localStorage.removeItem(key);\n    } catch (_a) {}\n  }\n\n};\nconst initializedStorageKeys = new Set();\n\nfunction useLocalStorageState(key, defaultValue) {\n  const [defaultValueState] = react_1.useState(() => {\n    const isCallable = value => typeof value === 'function';\n\n    return isCallable(defaultValue) ? defaultValue() : defaultValue;\n  });\n  const [state, setState] = react_1.useState(() => {\n    return {\n      value: storage.get(key, defaultValueState),\n      isPersistent: (() => {\n        if (typeof window === 'undefined') {\n          return true;\n        }\n\n        try {\n          localStorage.setItem('--use-local-storage-state--', 'dummy');\n          localStorage.removeItem('--use-local-storage-state--');\n          return true;\n        } catch (_a) {\n          return false;\n        }\n      })()\n    };\n  });\n  const updateValue = react_1.useMemo(() => {\n    const fn = newValue => {\n      const isCallable = value => typeof value === 'function';\n\n      if (isCallable(newValue)) {\n        setState(state => ({\n          value: newValue(state.value),\n          isPersistent: storage.set(key, newValue)\n        }));\n      } else {\n        setState({\n          value: newValue,\n          isPersistent: storage.set(key, newValue)\n        });\n      }\n    };\n\n    fn.reset = () => {\n      storage.remove(key);\n      setState({\n        value: defaultValueState,\n        isPersistent: state.isPersistent\n      });\n    };\n\n    return fn;\n  }, [key, defaultValueState]);\n  react_1.useEffect(() => {\n    if (initializedStorageKeys.has(key)) {\n      throw new Error(`Multiple instances of useLocalStorageState() has been initialized with the same key. ` + `Use createLocalStorageStateHook() instead. ` + `Example implementation: ` + `https://github.com/astoilkov/use-local-storage-state#create-local-storage-state-hook-example`);\n    } else {\n      initializedStorageKeys.add(key);\n    }\n\n    return () => void initializedStorageKeys.delete(key);\n  }, []);\n  react_1.useEffect(() => {\n    const onStorage = e => {\n      if (e.storageArea === localStorage && e.key === key) {\n        setState({\n          value: storage.get(key, defaultValueState),\n          isPersistent: true\n        });\n      }\n    };\n\n    window.addEventListener('storage', onStorage);\n    return () => window.removeEventListener('storage', onStorage);\n  }, [defaultValueState]);\n  return [state.value, updateValue, state.isPersistent];\n}\n\nexports.default = useLocalStorageState;\n\nfunction createLocalStorageStateHook(key, defaultValue) {\n  const updates = [];\n  return function useLocalStorageStateHook() {\n    const [value, setValue, isPersistent] = useLocalStorageState(key, defaultValue);\n    const updateValue = react_1.useMemo(() => {\n      const fn = newValue => {\n        for (const update of updates) {\n          update(newValue);\n        }\n      };\n\n      fn.reset = () => {\n        for (const update of updates) {\n          update.reset();\n        }\n      };\n\n      return fn;\n    }, []);\n    react_1.useEffect(() => {\n      initializedStorageKeys.delete(key);\n    }, []);\n    react_1.useEffect(() => {\n      updates.push(setValue);\n      return () => void updates.splice(updates.indexOf(setValue), 1);\n    }, [setValue]);\n    return [value, updateValue, isPersistent];\n  };\n}\n\nexports.createLocalStorageStateHook = createLocalStorageStateHook;","map":{"version":3,"sources":["/Users/kevinyao/Documents/GitHub/my-app/node_modules/use-local-storage-state/dist/index.js"],"names":["Object","defineProperty","exports","value","react_1","require","parseJSON","undefined","JSON","parse","data","storage","get","key","defaultValue","_a","localStorage","getItem","_b","set","setItem","stringify","remove","removeItem","initializedStorageKeys","Set","useLocalStorageState","defaultValueState","useState","isCallable","state","setState","isPersistent","window","updateValue","useMemo","fn","newValue","reset","useEffect","has","Error","add","delete","onStorage","e","storageArea","addEventListener","removeEventListener","default","createLocalStorageStateHook","updates","useLocalStorageStateHook","setValue","update","push","splice","indexOf"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_1 = require(\"react\");\nfunction parseJSON(value) {\n    return value === 'undefined'\n        ? undefined\n        :\n            JSON.parse(value !== null && value !== void 0 ? value : '');\n}\nconst data = {};\nconst storage = {\n    get(key, defaultValue) {\n        var _a;\n        try {\n            return (_a = data[key]) !== null && _a !== void 0 ? _a : parseJSON(localStorage.getItem(key));\n        }\n        catch (_b) {\n            return defaultValue;\n        }\n    },\n    set(key, value) {\n        try {\n            localStorage.setItem(key, JSON.stringify(value));\n            data[key] = undefined;\n            return true;\n        }\n        catch (_a) {\n            data[key] = value;\n            return false;\n        }\n    },\n    remove(key) {\n        data[key] = undefined;\n        try {\n            localStorage.removeItem(key);\n        }\n        catch (_a) { }\n    },\n};\nconst initializedStorageKeys = new Set();\nfunction useLocalStorageState(key, defaultValue) {\n    const [defaultValueState] = react_1.useState(() => {\n        const isCallable = (value) => typeof value === 'function';\n        return isCallable(defaultValue) ? defaultValue() : defaultValue;\n    });\n    const [state, setState] = react_1.useState(() => {\n        return {\n            value: storage.get(key, defaultValueState),\n            isPersistent: (() => {\n                if (typeof window === 'undefined') {\n                    return true;\n                }\n                try {\n                    localStorage.setItem('--use-local-storage-state--', 'dummy');\n                    localStorage.removeItem('--use-local-storage-state--');\n                    return true;\n                }\n                catch (_a) {\n                    return false;\n                }\n            })(),\n        };\n    });\n    const updateValue = react_1.useMemo(() => {\n        const fn = (newValue) => {\n            const isCallable = (value) => typeof value === 'function';\n            if (isCallable(newValue)) {\n                setState((state) => ({\n                    value: newValue(state.value),\n                    isPersistent: storage.set(key, newValue),\n                }));\n            }\n            else {\n                setState({\n                    value: newValue,\n                    isPersistent: storage.set(key, newValue),\n                });\n            }\n        };\n        fn.reset = () => {\n            storage.remove(key);\n            setState({\n                value: defaultValueState,\n                isPersistent: state.isPersistent,\n            });\n        };\n        return fn;\n    }, [key, defaultValueState]);\n    react_1.useEffect(() => {\n        if (initializedStorageKeys.has(key)) {\n            throw new Error(`Multiple instances of useLocalStorageState() has been initialized with the same key. ` +\n                `Use createLocalStorageStateHook() instead. ` +\n                `Example implementation: ` +\n                `https://github.com/astoilkov/use-local-storage-state#create-local-storage-state-hook-example`);\n        }\n        else {\n            initializedStorageKeys.add(key);\n        }\n        return () => void initializedStorageKeys.delete(key);\n    }, []);\n    react_1.useEffect(() => {\n        const onStorage = (e) => {\n            if (e.storageArea === localStorage && e.key === key) {\n                setState({\n                    value: storage.get(key, defaultValueState),\n                    isPersistent: true,\n                });\n            }\n        };\n        window.addEventListener('storage', onStorage);\n        return () => window.removeEventListener('storage', onStorage);\n    }, [defaultValueState]);\n    return [state.value, updateValue, state.isPersistent];\n}\nexports.default = useLocalStorageState;\nfunction createLocalStorageStateHook(key, defaultValue) {\n    const updates = [];\n    return function useLocalStorageStateHook() {\n        const [value, setValue, isPersistent] = useLocalStorageState(key, defaultValue);\n        const updateValue = react_1.useMemo(() => {\n            const fn = (newValue) => {\n                for (const update of updates) {\n                    update(newValue);\n                }\n            };\n            fn.reset = () => {\n                for (const update of updates) {\n                    update.reset();\n                }\n            };\n            return fn;\n        }, []);\n        react_1.useEffect(() => {\n            initializedStorageKeys.delete(key);\n        }, []);\n        react_1.useEffect(() => {\n            updates.push(setValue);\n            return () => void updates.splice(updates.indexOf(setValue), 1);\n        }, [setValue]);\n        return [value, updateValue, isPersistent];\n    };\n}\nexports.createLocalStorageStateHook = createLocalStorageStateHook;\n"]},"metadata":{},"sourceType":"script"}