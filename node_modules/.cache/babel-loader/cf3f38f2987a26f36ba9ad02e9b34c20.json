{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/kevinyao/Documents/GitHub/create-react-app/my-app/src/components/Chatbox/Chatbox.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport './Chatbox.css';\nimport { Image, InputGroup, Button, Row, Col } from 'react-bootstrap';\nimport Textarea from 'react-expanding-textarea';\nimport { BsHeartFill, BsHeart } from \"react-icons/bs\";\nimport Toolbar from '../Toolbar/Toolbar.js';\nimport { commentStorage, statusStorage } from '../Storage/Storage.js';\n\nconst Chatbox = ({\n  view,\n  setView\n}) => {\n  _s();\n\n  const [comments, setComments] = commentStorage();\n  const [status, setStatus] = statusStorage();\n  const textRef = useRef(null);\n\n  const onReplyClick = index => {\n    textRef.current.focus();\n    setStatus({ ...status,\n      replyTarget: index\n    });\n  };\n\n  function getTableData(values) {\n    if (view == 'portrait') {\n      let expand = false;\n      return values.map((comment, index) => {\n        if ([0, 1, values.length - 2, values.length - 1].includes(index)) {\n          return /*#__PURE__*/_jsxDEV(Row, {\n            children: [/*#__PURE__*/_jsxDEV(Col, {\n              className: \"comment\",\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: comment.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 31,\n                columnNumber: 17\n              }, this), \" \", comment.comment]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 30,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              xs: \"auto\",\n              className: \"heart\",\n              children: isCommentLiked(index) ? /*#__PURE__*/_jsxDEV(BsHeartFill, {\n                onClick: () => likedComment(index)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 35,\n                columnNumber: 19\n              }, this) : /*#__PURE__*/_jsxDEV(BsHeart, {\n                onClick: () => likedComment(index)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 36,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 15\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 13\n          }, this);\n        }\n\n        if (!expand) {\n          expand = true;\n          return /*#__PURE__*/_jsxDEV(Row, {\n            children: /*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                onClick: () => setView('landscape'),\n                children: [\"View all \", values.length - 4, \" comments\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 46,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 15\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 13\n          }, this);\n        }\n      });\n    }\n\n    return values.map((comment, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            xs: \"auto\",\n            children: /*#__PURE__*/_jsxDEV(Image, {\n              className: \"chatimage\",\n              src: comment.image,\n              roundedCircle: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            className: \"comment\",\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: comment.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 15\n            }, this), \" \", comment.comment]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            className: \"heart\",\n            xs: \"auto\",\n            children: isCommentLiked(index) ? /*#__PURE__*/_jsxDEV(BsHeartFill, {\n              onClick: () => likedComment(index)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(BsHeart, {\n              onClick: () => likedComment(index)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            className: \"commentdetails\",\n            xs: \"auto\",\n            children: \"1 Day\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            className: \"commentdetails\",\n            xs: \"auto\",\n            children: [comment.liked.length, \" Likes\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            className: \"commentdetails\",\n            xs: \"auto\",\n            onClick: () => onReplyClick(index),\n            children: \"Reply\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), comment.replies.length > 0 ? /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            className: \"showall\",\n            children: \"Show All Replies\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this);\n    });\n  }\n\n  function handleButtonClick() {\n    if (textRef) {\n      const messageObject = {\n        name: status.currentUser.name,\n        comment: textRef.current.value,\n        replies: [],\n        liked: [],\n        image: status.currentUser.image\n      };\n      setComments([...comments, messageObject]);\n      textRef.current.value = '';\n    }\n  }\n\n  const isCommentLiked = index => {\n    for (let i = 0; i < comments[index].liked.length; i += 1) {\n      if (comments[index].liked[i].name === status.currentUser.name) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  const likedComment = index => {\n    let newComments = comments;\n    let addUser = true;\n\n    for (let i = 0; i < comments[index].liked.length; i += 1) {\n      if (comments[index].liked[i].name === status.currentUser.name) {\n        newComments[index].liked.splice(i, 1);\n        addUser = false;\n      }\n    }\n\n    if (addUser) newComments[index].liked = [...newComments[index].liked, status.currentUser];\n    setComments(newComments);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: view + 'chatbox',\n    children: [view == 'portrait' ? /*#__PURE__*/_jsxDEV(Toolbar, {\n      view: view,\n      textRef: textRef,\n      setView: setView\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 29\n    }, this) : '', /*#__PURE__*/_jsxDEV(\"div\", {\n      className: view + \"chatdiv\",\n      children: getTableData(comments)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), view == 'landscape' ? /*#__PURE__*/_jsxDEV(Toolbar, {\n      view: view,\n      textRef: textRef,\n      setView: setView\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 30\n    }, this) : '', /*#__PURE__*/_jsxDEV(InputGroup, {\n      children: [/*#__PURE__*/_jsxDEV(Textarea, {\n        className: \"textarea\",\n        placeholder: \"Add a comment...\",\n        maxLength: \"128\",\n        ref: textRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputGroup.Append, {\n        className: \"post\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => handleButtonClick(),\n          variant: \"link\",\n          children: \"Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Chatbox, \"w6wg8oN6T1JIeHvMfowtaM3MyjI=\");\n\n_c = Chatbox;\nChatbox.propTypes = {\n  view: PropTypes.string.isRequired,\n  setView: PropTypes.func.isRequired\n};\nexport default Chatbox;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chatbox\");","map":{"version":3,"sources":["/Users/kevinyao/Documents/GitHub/create-react-app/my-app/src/components/Chatbox/Chatbox.js"],"names":["React","useRef","PropTypes","Image","InputGroup","Button","Row","Col","Textarea","BsHeartFill","BsHeart","Toolbar","commentStorage","statusStorage","Chatbox","view","setView","comments","setComments","status","setStatus","textRef","onReplyClick","index","current","focus","replyTarget","getTableData","values","expand","map","comment","length","includes","name","isCommentLiked","likedComment","image","liked","replies","handleButtonClick","messageObject","currentUser","value","i","newComments","addUser","splice","propTypes","string","isRequired","func"],"mappings":"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","sourcesContent":["import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Chatbox.css';\n\nimport {Image, InputGroup, Button, Row, Col} from 'react-bootstrap';\nimport Textarea from 'react-expanding-textarea';\nimport { BsHeartFill, BsHeart } from \"react-icons/bs\";\n\nimport Toolbar from '../Toolbar/Toolbar.js';\nimport { commentStorage, statusStorage } from '../Storage/Storage.js';\n\nconst Chatbox = ({view, setView}) => {\n  const [comments, setComments] = commentStorage();\n  const [status, setStatus] = statusStorage();\n  const textRef = useRef(null);\n\n  const onReplyClick = index => {\n    textRef.current.focus();\n    setStatus({...status, replyTarget: index});\n  }\n\n  function getTableData(values) {\n    if (view == 'portrait') {\n      let expand = false;\n      return (values.map((comment, index) => {\n        if ([0, 1, values.length - 2, values.length - 1].includes(index)) {\n          return(\n            <Row key={index}>\n              <Col className=\"comment\">\n                <b>{comment.name}</b> {comment.comment}\n              </Col>\n              <Col xs=\"auto\" className=\"heart\">\n                {isCommentLiked(index) ?\n                  <BsHeartFill onClick={() => likedComment(index)}/> :\n                  <BsHeart onClick={() => likedComment(index)}/>}\n              </Col>\n            </Row>\n          );\n        }\n        if (!expand) {\n          expand = true;\n          return(\n            <Row key={index}>\n              <Col>\n                <p onClick={() => setView('landscape')}>View all {values.length - 4} comments</p>\n              </Col>\n            </Row>\n          );\n        }\n      }));\n    }\n    return (values.map((comment, index) => {\n      return(\n        <div key={index}>\n          <Row>\n            <Col xs=\"auto\">\n              <Image className='chatimage' src={comment.image} roundedCircle />\n            </Col>\n            <Col className=\"comment\">\n              <b>{comment.name}</b> {comment.comment}\n            </Col>\n            <Col className=\"heart\" xs=\"auto\">\n              {isCommentLiked(index) ?\n                <BsHeartFill onClick={() => likedComment(index)}/> :\n                <BsHeart onClick={() => likedComment(index)}/>}\n            </Col>\n          </Row>\n          <Row>\n            <Col className=\"commentdetails\" xs=\"auto\">\n              1 Day\n            </Col>\n            <Col className=\"commentdetails\" xs=\"auto\">\n              {comment.liked.length} Likes\n            </Col>\n            <Col className=\"commentdetails\" xs=\"auto\" onClick={() => onReplyClick(index)}>\n              Reply\n            </Col>\n          </Row>\n          {comment.replies.length > 0 ?\n            <Row>\n              <Col className=\"showall\">Show All Replies</Col>\n            </Row>\n            :\n            <br/>\n          }\n        </div>\n      );\n    }));\n  }\n\n  function handleButtonClick() {\n    if(textRef) {\n      const messageObject = {\n        name: status.currentUser.name,\n        comment: textRef.current.value,\n        replies: [],\n        liked: [],\n        image: status.currentUser.image,\n      }\n      setComments([...comments, messageObject]);\n      textRef.current.value = '';\n    }\n  }\n\n  const isCommentLiked = index => {\n    for (let i = 0; i < comments[index].liked.length; i += 1) {\n      if (comments[index].liked[i].name === status.currentUser.name) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  const likedComment = index => {\n    let newComments = comments;\n    let addUser = true;\n    for (let i = 0; i < comments[index].liked.length; i += 1) {\n      if (comments[index].liked[i].name === status.currentUser.name) {\n        newComments[index].liked.splice(i, 1);\n        addUser = false;\n      }\n    }\n    if (addUser)\n      newComments[index].liked = [...newComments[index].liked, status.currentUser];\n\n    setComments(newComments);\n  }\n\n  return(\n    <div className={view + 'chatbox'}>\n      {view == 'portrait' ? <Toolbar view={view} textRef={textRef} setView={setView}/> : ''}\n      <div className={view + \"chatdiv\"}>\n        {getTableData(comments)}\n      </div>\n      {view == 'landscape' ? <Toolbar view={view} textRef={textRef} setView={setView}/> : ''}\n\n      <InputGroup>\n        <Textarea\n          className=\"textarea\"\n          placeholder=\"Add a comment...\"\n          maxLength=\"128\"\n          ref={textRef}\n        />\n        <InputGroup.Append className=\"post\">\n          <Button onClick={() => handleButtonClick()} variant=\"link\">Post</Button>\n        </InputGroup.Append>\n      </InputGroup>\n    </div>\n  );\n}\n\nChatbox.propTypes = {\n  view: PropTypes.string.isRequired,\n  setView: PropTypes.func.isRequired,\n}\n\nexport default Chatbox;\n"]},"metadata":{},"sourceType":"module"}